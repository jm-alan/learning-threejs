{"version":3,"sources":["store/engine/scenes/actions.js","components/Lights/PointLight.js","store/engine/pointLights/actions.js"],"names":["CallScene","name","type","types","SetScene","CreateScene","dispatch","a","Scene","object","DestroyScene","AddToScene","RemoveFromScene","PointLight","objectKey","initialColor","initialPosition","initialIntensity","initialDistance","initialDecay","sceneName","children","useDispatch","ready","useSelector","state","engine","renderer","light","pointLights","all","posX","posY","posZ","color","intensity","distance","decay","useEffect","props","CreatePointLight","position","setX","setY","setZ","set"],"mappings":"4WAEaA,EAAY,SAAAC,GAAI,MAAK,CAChCC,KAAMC,IACNF,SAGWG,EAAW,SAAAH,GAAI,MAAK,CAC/BC,KAAMC,IACNF,SAGWI,EAAc,SAAAJ,GAAI,8CAAI,WAAMK,GAAN,iBAAAC,EAAA,sEACT,mDADS,gBACzBC,EADyB,EACzBA,MACRF,EAAS,CACPJ,KAAMC,IACNF,OACAQ,OAAQ,IAAID,IALmB,2CAAJ,uDASlBE,EAAe,SAAAT,GAAI,MAAK,CACnCC,KAAMC,IACNF,SAGWU,EAAa,SAACV,EAAD,OAASQ,EAAT,EAASA,OAAT,MAAuB,CAC/CP,KAAMC,IACNF,OACAQ,WAGWG,EAAkB,SAACX,EAAD,OAASQ,EAAT,EAASA,OAAT,MAAuB,CACpDP,KAAMC,IACNF,OACAQ,Y,yIC7Ba,SAASI,EAAT,GAIX,IAHFC,EAGC,EAHDA,UAAWC,EAGV,EAHUA,aAAcC,EAGxB,EAHwBA,gBACzBC,EAEC,EAFDA,iBAAkBC,EAEjB,EAFiBA,gBAAiBC,EAElC,EAFkCA,aACnCC,EACC,EADDA,UAAWC,EACV,EADUA,SAELf,EAAWgB,cAEXC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,SAASJ,SACnDK,EAAQJ,aAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOG,YAAYC,IAAIhB,MAC1DiB,EAAOP,aAAY,SAAAC,GAAK,uBAAIA,EAAMC,OAAOG,YAAYC,IAAIhB,UAAjC,aAAI,EAAyCiB,QACrEC,EAAOR,aAAY,SAAAC,GAAK,uBAAIA,EAAMC,OAAOG,YAAYC,IAAIhB,UAAjC,aAAI,EAAyCkB,QACrEC,EAAOT,aAAY,SAAAC,GAAK,uBAAIA,EAAMC,OAAOG,YAAYC,IAAIhB,UAAjC,aAAI,EAAyCmB,QACrEC,EAAQV,aAAY,SAAAC,GAAK,uBAAIA,EAAMC,OAAOG,YAAYC,IAAIhB,UAAjC,aAAI,EAAyCoB,SACtEC,EAAYX,aAAY,SAAAC,GAAK,uBAAIA,EAAMC,OAAOG,YAAYC,IAAIhB,UAAjC,aAAI,EAAyCqB,aAC1EC,EAAWZ,aAAY,SAAAC,GAAK,uBAAIA,EAAMC,OAAOG,YAAYC,IAAIhB,UAAjC,aAAI,EAAyCsB,YACzEC,EAAQb,aAAY,SAAAC,GAAK,uBAAIA,EAAMC,OAAOG,YAAYC,IAAIhB,UAAjC,aAAI,EAAyCuB,SA8C5E,OA5CAC,qBAAU,WACJf,IACGK,GACHtB,ECxBwB,SAC9BL,GAD8B,IAE9BiC,EAF8B,uDAEtB,SACRC,EAH8B,uDAGlB,EACZC,EAJ8B,uCAK9BC,EAL8B,uCAM9BrB,EAN8B,uDAMZ,CAChBe,KAAM,EAAGC,KAAM,EAAGC,KAAM,GAPI,8CAS3B,WAAM3B,GAAN,iBAAAC,EAAA,sEAC0B,mDAD1B,gBACKM,EADL,EACKA,WACRP,EAAS,CACPJ,KAAMC,IACNF,OACAQ,OAAQ,IAAII,EACVqB,EACAC,EACAC,EACAC,GAEFE,MAAO,CAAEL,QAAOC,YAAWC,WAAUC,QAAOrB,qBAX3C,2CAT2B,sDDwBfwB,CACP1B,EAAWC,EAAcE,EACzBC,EAAiBC,EAAcH,OAIpC,CAACV,EAAUiB,EAAOK,EAAOd,EAAWC,EAAcC,EAAiBC,EAAkBC,EAAiBC,IAEzGmB,qBAAU,WAER,OADIf,GAASK,GAAOtB,EAASK,YAAWS,EAAWQ,IAC5C,kBAAOL,GAASK,GAAStB,EAASM,YAAgBQ,EAAWQ,OACnE,CAACtB,EAAUc,EAAWG,EAAOK,IAEhCU,qBAAU,WACJV,GAAOA,EAAMnB,OAAOgC,SAASC,KAAKX,KACrC,CAACH,EAAOG,IAEXO,qBAAU,WACJV,GAAOA,EAAMnB,OAAOgC,SAASE,KAAKX,KACrC,CAACJ,EAAOI,IAEXM,qBAAU,WACJV,GAAOA,EAAMnB,OAAOgC,SAASG,KAAKX,KACrC,CAACL,EAAOK,IAEXK,qBAAU,WACJV,IAAOA,EAAMnB,OAAO0B,UAAYA,KACnC,CAACP,EAAOO,IAEXG,qBAAU,WACJV,IAAOA,EAAMnB,OAAO2B,SAAWA,KAClC,CAACR,EAAOQ,IAEXE,qBAAU,WACJV,IAAOA,EAAMnB,OAAO4B,MAAQA,KAC/B,CAACT,EAAOS,IAEXC,qBAAU,WACJV,GAAOA,EAAMnB,OAAOyB,MAAMW,IAAIX,KACjC,CAACN,EAAOM,IAEX,OAAOb,QAAP,IAAOA,IAAY","file":"static/js/13.1f8eb855.chunk.js","sourcesContent":["import * as types from './types';\n\nexport const CallScene = name => ({\n  type: types.CALL,\n  name\n});\n\nexport const SetScene = name => ({\n  type: types.CURRENT,\n  name\n});\n\nexport const CreateScene = name => async dispatch => {\n  const { Scene } = await import('three');\n  dispatch({\n    type: types.CREATE,\n    name,\n    object: new Scene()\n  });\n};\n\nexport const DestroyScene = name => ({\n  type: types.DESTROY,\n  name\n});\n\nexport const AddToScene = (name, { object }) => ({\n  type: types.ADD,\n  name,\n  object\n});\n\nexport const RemoveFromScene = (name, { object }) => ({\n  type: types.REMOVE,\n  name,\n  object\n});\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { CreatePointLight } from '../../store/engine/pointLights/actions';\nimport { AddToScene, RemoveFromScene } from '../../store/engine/scenes/actions';\n\nexport default function PointLight ({\n  objectKey, initialColor, initialPosition,\n  initialIntensity, initialDistance, initialDecay,\n  sceneName, children\n}) {\n  const dispatch = useDispatch();\n\n  const ready = useSelector(state => state.engine.renderer.ready);\n  const light = useSelector(state => state.engine.pointLights.all[objectKey]);\n  const posX = useSelector(state => state.engine.pointLights.all[objectKey]?.posX);\n  const posY = useSelector(state => state.engine.pointLights.all[objectKey]?.posY);\n  const posZ = useSelector(state => state.engine.pointLights.all[objectKey]?.posZ);\n  const color = useSelector(state => state.engine.pointLights.all[objectKey]?.color);\n  const intensity = useSelector(state => state.engine.pointLights.all[objectKey]?.intensity);\n  const distance = useSelector(state => state.engine.pointLights.all[objectKey]?.distance);\n  const decay = useSelector(state => state.engine.pointLights.all[objectKey]?.decay);\n\n  useEffect(() => {\n    if (ready) {\n      if (!light) {\n        dispatch(CreatePointLight(\n          objectKey, initialColor, initialIntensity,\n          initialDistance, initialDecay, initialPosition\n        ));\n      }\n    }\n  }, [dispatch, ready, light, objectKey, initialColor, initialPosition, initialIntensity, initialDistance, initialDecay]);\n\n  useEffect(() => {\n    if (ready && light) dispatch(AddToScene(sceneName, light));\n    return () => !ready && light && dispatch(RemoveFromScene(sceneName, light));\n  }, [dispatch, sceneName, ready, light]);\n\n  useEffect(() => {\n    if (light) light.object.position.setX(posX);\n  }, [light, posX]);\n\n  useEffect(() => {\n    if (light) light.object.position.setY(posY);\n  }, [light, posY]);\n\n  useEffect(() => {\n    if (light) light.object.position.setZ(posZ);\n  }, [light, posZ]);\n\n  useEffect(() => {\n    if (light) light.object.intensity = intensity;\n  }, [light, intensity]);\n\n  useEffect(() => {\n    if (light) light.object.distance = distance;\n  }, [light, distance]);\n\n  useEffect(() => {\n    if (light) light.object.decay = decay;\n  }, [light, decay]);\n\n  useEffect(() => {\n    if (light) light.object.color.set(color);\n  }, [light, color]);\n\n  return children ?? null;\n}\n","import * as types from './types';\n\nexport const CreatePointLight = (\n  name,\n  color = 0xFFFFFF,\n  intensity = 1,\n  distance,\n  decay,\n  initialPosition = {\n    posX: 0, posY: 0, posZ: 0\n  }\n) => async dispatch => {\n  const { PointLight } = await import('three');\n  dispatch({\n    type: types.NEW,\n    name,\n    object: new PointLight(\n      color,\n      intensity,\n      distance,\n      decay\n    ),\n    props: { color, intensity, distance, decay, initialPosition }\n  });\n};\n\nexport const DestroyPointLight = (name, parent) => ({\n  type: types.DESTROY,\n  name,\n  parent\n});\n\nexport const SetPointLightColor = (name, color) => ({\n  type: types.COLOR,\n  name,\n  color\n});\n\nexport const SetPointLightIntensity = (name, intensity) => ({\n  type: types.INTENSITY,\n  name,\n  intensity\n});\n\nexport const MovePointLightX = {\n  relative (name, offset) {\n    return {\n      type: types.MOVEX_RELATIVE,\n      name,\n      offset\n    };\n  },\n  absolute (name, offset) {\n    return {\n      type: types.MOVEX_ABSOLUTE,\n      name,\n      offset\n    };\n  }\n};\n\nexport const MovePointLightY = {\n  relative (name, offset) {\n    return {\n      type: types.MOVEY_RELATIVE,\n      name,\n      offset\n    };\n  },\n  absolute (name, offset) {\n    return {\n      type: types.MOVEY_ABSOLUTE,\n      name,\n      offset\n    };\n  }\n};\n\nexport const MovePointLightZ = {\n  relative (name, offset) {\n    return {\n      type: types.MOVEZ_RELATIVE,\n      name,\n      offset\n    };\n  },\n  absolute (name, offset) {\n    return {\n      type: types.MOVEZ_ABSOLUTE,\n      name,\n      offset\n    };\n  }\n};\n"],"sourceRoot":""}