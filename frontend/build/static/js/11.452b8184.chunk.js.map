{"version":3,"sources":["store/engine/scenes/actions.js","store/engine/cameras/actions.js","components/Director/index.js"],"names":["CallScene","name","type","types","SetScene","CreateScene","dispatch","a","Scene","object","DestroyScene","AddToScene","RemoveFromScene","CreatePerspectiveCamera","FOV","frustNear","frustFar","initialPosition","posX","posY","posZ","initialRotation","rotX","rotY","rotZ","PerspectiveCamera","props","window","innerWidth","innerHeight","DestroyPerspectiveCamera","SetCamera","CallCamera","ReadyCamera","ReadyCameraPos","ReadyCameraRot","AddVisibilityFunction","action","RemoveVisibilityFunction","Director","children","cameras","scenes","useDispatch","calledCamera","useSelector","state","engine","current","cameraOneReady","all","cameraOne","ready","sceneMain","main","calledScene","called","debugEnabled","overlays","debug","useEffect"],"mappings":"4WAEaA,EAAY,SAAAC,GAAI,MAAK,CAChCC,KAAMC,IACNF,SAGWG,EAAW,SAAAH,GAAI,MAAK,CAC/BC,KAAMC,IACNF,SAGWI,EAAc,SAAAJ,GAAI,8CAAI,WAAMK,GAAN,iBAAAC,EAAA,sEACT,mDADS,gBACzBC,EADyB,EACzBA,MACRF,EAAS,CACPJ,KAAMC,IACNF,OACAQ,OAAQ,IAAID,IALmB,2CAAJ,uDASlBE,EAAe,SAAAT,GAAI,MAAK,CACnCC,KAAMC,IACNF,SAGWU,EAAa,SAACV,EAAD,OAASQ,EAAT,EAASA,OAAT,MAAuB,CAC/CP,KAAMC,IACNF,OACAQ,WAGWG,EAAkB,SAACX,EAAD,OAASQ,EAAT,EAASA,OAAT,MAAuB,CACpDP,KAAMC,IACNF,OACAQ,Y,sXCjCWI,EAA0B,SACrCZ,GADqC,IAC/Ba,EAD+B,uDACzB,GAAIC,EADqB,uDACT,GAC5BC,EAFqC,uDAE1B,IAAMC,EAFoB,uDAEF,CAAEC,KAAM,EAAGC,KAAM,EAAGC,KAAM,GAC7DC,EAHqC,uDAGnB,CAAEC,KAAM,EAAGC,KAAM,EAAGC,KAAM,GAHP,8CAIlC,WAAMlB,GAAN,iBAAAC,EAAA,sEACiC,mDADjC,gBACKkB,EADL,EACKA,kBACRnB,EAAS,CACPJ,KAAMC,IACNF,OACAyB,MAAO,CACLZ,MACAC,YACAC,WACAC,kBACAI,mBAEFZ,OAAQ,IAAIgB,EACVX,EACAa,OAAOC,WAAaD,OAAOE,YAC3Bd,EACAC,KAhBD,2CAJkC,uDAyB1Bc,EAA2B,SAAA7B,GAAI,MAAK,CAC/CC,KAAMC,IACNF,SAGW8B,EAAY,SAAA9B,GAAI,MAAK,CAChCC,KAAMC,IACNF,SAGW+B,EAAa,SAAA/B,GAAI,MAAK,CACjCC,KAAMC,IACNF,SAGWgC,EAAc,SAAAhC,GAAI,MAAK,CAClCC,KAAMC,IACNF,SAGWiC,EAAiB,SAAAjC,GAAI,MAAK,CACrCC,KAAMC,IACNF,SAGWkC,EAAiB,SAAAlC,GAAI,MAAK,CACrCC,KAAMC,IACNF,SAGWmC,EAAwB,SAACnC,EAAMoC,GAAP,MAAmB,CACtDnC,KAAMC,IACNF,OACAoC,WAGWC,EAA2B,SAAArC,GAAI,MAAK,CAC/CC,KAAMC,IACNF,U,gCCjEF,iFAMe,SAASsC,EAAT,GAAmD,IAA9BC,EAA6B,EAA7BA,SAC5BlC,GADyD,EAAnBmC,QAAmB,EAAVC,OACpCC,eAEXC,EAAeC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAON,QAAQO,QAAQ/C,QACjEgD,EAAiBJ,aAAY,SAAAC,GAAK,uBAAIA,EAAMC,OAAON,QAAQS,IAAIC,iBAA7B,aAAI,EAAoCC,SAC1EC,EAAYR,aAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOL,OAAOQ,IAAII,QACzDC,EAAcV,aAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOL,OAAOc,UACvDC,EAAeZ,aAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOW,SAASC,SAkBhE,OAhBAC,qBAAU,WAENX,GACkB,cAAjBL,IACAa,GACDnD,EAAS0B,YAAW,gBACrB,CAAC1B,EAAUmD,EAAcb,EAAcK,IAE1CW,qBAAU,WAENP,GACgB,SAAhBE,IACCE,GACDnD,EAASN,YAAU,WACpB,CAACM,EAAU+C,EAAWE,EAAaE,IAE/BjB","file":"static/js/11.452b8184.chunk.js","sourcesContent":["import * as types from './types';\n\nexport const CallScene = name => ({\n  type: types.CALL,\n  name\n});\n\nexport const SetScene = name => ({\n  type: types.CURRENT,\n  name\n});\n\nexport const CreateScene = name => async dispatch => {\n  const { Scene } = await import('three');\n  dispatch({\n    type: types.CREATE,\n    name,\n    object: new Scene()\n  });\n};\n\nexport const DestroyScene = name => ({\n  type: types.DESTROY,\n  name\n});\n\nexport const AddToScene = (name, { object }) => ({\n  type: types.ADD,\n  name,\n  object\n});\n\nexport const RemoveFromScene = (name, { object }) => ({\n  type: types.REMOVE,\n  name,\n  object\n});\n","import * as types from './types';\n\nexport const CreatePerspectiveCamera = (\n  name, FOV = 75, frustNear = 0.1,\n  frustFar = 1000, initialPosition = { posX: 0, posY: 0, posZ: 0 },\n  initialRotation = { rotX: 0, rotY: 0, rotZ: 0 }\n) => async dispatch => {\n  const { PerspectiveCamera } = await import('three');\n  dispatch({\n    type: types.CREATE,\n    name,\n    props: {\n      FOV,\n      frustNear,\n      frustFar,\n      initialPosition,\n      initialRotation\n    },\n    object: new PerspectiveCamera(\n      FOV,\n      window.innerWidth / window.innerHeight,\n      frustNear,\n      frustFar\n    )\n  });\n};\n\nexport const DestroyPerspectiveCamera = name => ({\n  type: types.DESTROY,\n  name\n});\n\nexport const SetCamera = name => ({\n  type: types.CURRENT,\n  name\n});\n\nexport const CallCamera = name => ({\n  type: types.CALL,\n  name\n});\n\nexport const ReadyCamera = name => ({\n  type: types.READY,\n  name\n});\n\nexport const ReadyCameraPos = name => ({\n  type: types.READY_POS,\n  name\n});\n\nexport const ReadyCameraRot = name => ({\n  type: types.READY_ROT,\n  name\n});\n\nexport const AddVisibilityFunction = (name, action) => ({\n  type: types.ADD_FUNCTION,\n  name,\n  action\n});\n\nexport const RemoveVisibilityFunction = name => ({\n  type: types.REMOVE_FUNCTION,\n  name\n});\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { CallCamera } from '../../store/engine/cameras/actions';\nimport { CallScene } from '../../store/engine/scenes/actions';\n\nexport default function Director ({ children, cameras, scenes }) {\n  const dispatch = useDispatch();\n\n  const calledCamera = useSelector(state => state.engine.cameras.current.name);\n  const cameraOneReady = useSelector(state => state.engine.cameras.all.cameraOne?.ready);\n  const sceneMain = useSelector(state => state.engine.scenes.all.main);\n  const calledScene = useSelector(state => state.engine.scenes.called);\n  const debugEnabled = useSelector(state => state.engine.overlays.debug);\n\n  useEffect(() => {\n    if (\n      cameraOneReady &&\n      (calledCamera !== 'cameraOne') &&\n      !debugEnabled\n    ) dispatch(CallCamera('cameraOne'));\n  }, [dispatch, debugEnabled, calledCamera, cameraOneReady]);\n\n  useEffect(() => {\n    if (\n      sceneMain &&\n      calledScene !== 'main' &&\n      !debugEnabled\n    ) dispatch(CallScene('main'));\n  }, [dispatch, sceneMain, calledScene, debugEnabled]);\n\n  return children;\n}\n"],"sourceRoot":""}